/*
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package main.java;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.SingleFrameApplication;

import main.java.game.Game;
import main.java.gui.ChooseThemeWindow;
import main.java.gui.GUI;
import main.java.gui.JChessAboutBox;
import main.java.gui.NewGameWindow;
import main.java.gui.PawnPromotionWindow;

/**
 * The application's main frame.
 */

public class JChessView extends FrameView implements ActionListener, ComponentListener {
	static GUI gui = null;

	public Game addNewTab(String title) {
		Game newGUI = new Game();
		this.gamesPane.addTab(title, newGUI);
		return newGUI;
	}

	@Override
	public void actionPerformed(ActionEvent event) {
		Object target = event.getSource();
		if (target == newGameItem) {
			this.newGameFrame = new NewGameWindow();
			this.newGameFrame.setLocationRelativeTo(null);
			JChessApp.getApplication().show(this.newGameFrame);
		} else if (target == this.themeSettingsMenu) {
			try {
				ChooseThemeWindow choose = new ChooseThemeWindow(this.getFrame());
				choose.setLocationRelativeTo(null);
				JChessApp.getApplication().show(choose);
			} catch (Exception exc) {
				JOptionPane.showMessageDialog(JChessApp.getApplication().getMainFrame(), exc.getMessage());
				System.out.println("Something wrong creating window - perhaps themeList is null");

				LogToFile.log(exc, "Error", "Something wrong creating window - perhaps themeList is null");
				exc.printStackTrace();
			}
		}
	}

	/// --endOf- don't delete, because they're interfaces for MouseEvent

	public JChessView(SingleFrameApplication app) {
		super(app);
		initComponents();
	}

	@Action
	public void showAboutBox() {
		if (aboutBox == null) {
			JFrame mainFrame = JChessApp.getApplication().getMainFrame();
			aboutBox = new JChessAboutBox(mainFrame);
			aboutBox.setLocationRelativeTo(mainFrame);
		}
		JChessApp.getApplication().show(aboutBox);
	}

	public String showPawnPromotionBox(String color) {
		if (promotionBox == null) {
			JFrame mainFrame = JChessApp.getApplication().getMainFrame();
			promotionBox = new PawnPromotionWindow(mainFrame, color);
			promotionBox.setLocationRelativeTo(mainFrame);
			promotionBox.setModal(true);

		}
		promotionBox.setColor(color);
		JChessApp.getApplication().show(promotionBox);

		return promotionBox.result;
	}

	public String showSaveWindow() {

		return "";
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		mainPanel = new javax.swing.JPanel();
		gamesPane = new main.java.gui.JChessTabbedPane();
		menuBar = new javax.swing.JMenuBar();
		javax.swing.JMenu fileMenu = new javax.swing.JMenu();
		newGameItem = new javax.swing.JMenuItem();
		javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
		optionsMenu = new javax.swing.JMenu();
		themeSettingsMenu = new javax.swing.JMenuItem();
		javax.swing.JMenu helpMenu = new javax.swing.JMenu();
		javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

		mainPanel.setMaximumSize(new java.awt.Dimension(800, 600));
		mainPanel.setMinimumSize(new java.awt.Dimension(800, 600));
		mainPanel.setName("mainPanel"); // NOI18N
		mainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

		gamesPane.setName("gamesPane"); // NOI18N

		javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
		mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(mainPanelLayout.createSequentialGroup().addContainerGap()
						.addComponent(gamesPane, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE).addContainerGap()));
		mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(mainPanelLayout.createSequentialGroup().addContainerGap()
						.addComponent(gamesPane, GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE).addContainerGap()));
		mainPanel.setLayout(mainPanelLayout);

		menuBar.setName("menuBar"); // NOI18N

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
				.getInstance(main.java.JChessApp.class).getContext().getResourceMap(JChessView.class);
		fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
		fileMenu.setName("fileMenu"); // NOI18N

		newGameItem.setAccelerator(
				javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
		newGameItem.setText(resourceMap.getString("newGameItem.text")); // NOI18N
		newGameItem.setName("newGameItem"); // NOI18N
		fileMenu.add(newGameItem);
		newGameItem.addActionListener(this);

		javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(main.java.JChessApp.class)
				.getContext().getActionMap(JChessView.class, this);
		exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
		exitMenuItem.setName("exitMenuItem"); // NOI18N
		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		optionsMenu.setText(resourceMap.getString("optionsMenu.text")); // NOI18N
		optionsMenu.setName("optionsMenu"); // NOI18N

		themeSettingsMenu.setText(resourceMap.getString("themeSettingsMenu.text")); // NOI18N
		themeSettingsMenu.setName("themeSettingsMenu"); // NOI18N
		optionsMenu.add(themeSettingsMenu);
		themeSettingsMenu.addActionListener(this);

		menuBar.add(optionsMenu);

		helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
		helpMenu.setName("helpMenu"); // NOI18N

		aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
		aboutMenuItem.setName("aboutMenuItem"); // NOI18N
		helpMenu.add(aboutMenuItem);

		menuBar.add(helpMenu);

		setComponent(mainPanel);
		setMenuBar(menuBar);
	}// </editor-fold>//GEN-END:initComponents

	private javax.swing.JTabbedPane gamesPane;
	public javax.swing.JPanel mainPanel;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JMenuItem newGameItem;
	private javax.swing.JMenu optionsMenu;
	private javax.swing.JMenuItem themeSettingsMenu;

	private JDialog aboutBox;
	private PawnPromotionWindow promotionBox;
	public NewGameWindow newGameFrame;

	@Override
	public void componentResized(ComponentEvent e) {
		// System.out.println("jchessView resized!!;");
		LogToFile.log(new UnsupportedOperationException("Not supported yet."), "ERROR", "Nor supported operation");
		throw new UnsupportedOperationException("Not supported yet.");
	}

	public Game getActiveTabGame() throws ArrayIndexOutOfBoundsException {
		return (Game) this.gamesPane.getComponentAt(this.gamesPane.getSelectedIndex());
	}

	public int getNumberOfOpenedTabs() {
		return this.gamesPane.getTabCount();
	}
@Override
	public void componentMoved(ComponentEvent e) {
		throw new UnsupportedOperationException("Not supported yet.");
	}
@Override
	public void componentShown(ComponentEvent e) {
		throw new UnsupportedOperationException("Not supported yet.");
	}
@Override
	public void componentHidden(ComponentEvent e) {
		throw new UnsupportedOperationException("Not supported yet.");
	}

}
