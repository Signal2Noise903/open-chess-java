/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'AndreaZ' at '27/10/16 11:01 PM' with Gradle 3.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
//apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
//apply from: '\\bin\\gradle-onejar.plugin'

//Added by 'sepideh sadat sobhgol' at 10/29/2016
//mainClassName = 'main.java.jchess.JChessApp'
//sourceSets.main.java.srcDirs = ['src']
 task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': '1.0.0',
        	'Main-Class': 'main.java.JChessApp'
    }
   //baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'main.java.jchess.JChessApp.java'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
     //jcenter()
     mavenCentral()
    // maven { url "https://repo1.maven.org/maven2"}
    // maven { url "https://mvnrepository.com/artifact" }
     //maven { url = 'http://download.java.net/maven/2'}

}
println "http.proxyHost = " + System.getProperty("http.proxyHost")
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    
    //classpath "org.grails:grails-gradle-plugin:3.0-SNAPSHOT"
    
     testCompile 'junit:junit:4.12'
    
    //Adding by 'sepideh sobhgol' at 10/29/2016
    
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.+'
    
   //compile fileTree(dir: '\\bin\\lib', include: ['*.jar'])  
   compile fileTree(dir: 'libs', include: '*.jar')
   compile group: 'org.jdesktop', name: 'swing-worker', version: '1.1'
   compile group: 'net.java.dev.swing-layout', name: 'swing-layout', version: '1.0.1'
   compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
   compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
   compile group: 'junit', name: 'junit', version: '4.11'
   compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
   compile group: 'com.lmax', name: 'disruptor', version: '3.2.0'
   compile group: 'org.jdesktop', name: 'appframework', version: '1.0.3'
   
    
    compile 'org.slf4j:slf4j-api:1.6.2'
    
    sourceSets {
    main {
        resources {
            srcDirs "src/"
            //,"src/main/java/resources"
        }
    }
}
}
test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}
//task copyRuntimeLibs(type: Copy) {
   // into 'libs'
 //   from configurations.testRuntime - configurations.runtime
 // }
  
uploadArchives {

    repositories {
       flatDir {
           dirs 'repos'
       }
   
    }

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
        options.compilerArgs << "-Xlint:unchecked"
    }
}
}


